Day -1 
Terraform:

On premises :   pupper/chef & Ansible  

Off premises: terraform, opentofu, pulumi  - IaC 
  1. Cloud — IAAS — AWS , Azure, gcloud  
  2. PAAS products - Kubernetes, PCF 
3. SAAS products —  outlook 365 ,  HR - CRM  ( success factor, workday , workspace, Zoho),  code repository ( GitHub, bitbucket) , ticket tools( service now, pager duty) 

Terraform & opentofu - native language to automate the function or coding  ( go language). it is easy to use & more documents & developers 

Pulumi — native language & javascript, go, python, java( few documents & few developers). 


Terraform: 
1. IAAS & PAAS products  
2. Not for SAAS products -  limited features and providers 
3.  On premises — ESXi & Xen servers. 

Terraform —  not needed any agent —

1. CLI - open source version 
2. GUI — enterprises version 

Terraform — installed in both windows & Mac machine

1. Providers  — products( cloud products) — AWS, azure, google cloud 
2. Resources —  services( cloud products) AWS( IAM , EC2, EBS, LB, EFS,)
3. Modules —   group of depend services( cloud products)( EC2 —> IAM — >region)
4. Variable —  Service Attributes or parameters or options ( EC2 — 1. Instance type, 2 name, 3 ip location , 4 VPC , 5 policy 6,  ingress or outgress rule ) 
5. Workspace —  different environments ( prod, non-prod, dev, test)
6. State*  —    resources build using terrform  will be maintained  state file  — we should not delete this file
                    1.  We cannot modify the configuration 
                    2.  Scale up or down 
                    3.  Mis-match in configuration 
7.  Directory structure 

 												Day -2  - 07/09/2024

 Devops — 5 products ( 400+ tools) 

Advantages:
1. Main for operation teams — infrastructure, middleware, DB , CRM  
2. Integration tools
3.  Development - 30 % 

Disadvantage:
1. We will not know how the backend works
2. Platform dependent ( Jenkins — groovy or shell script )  and platform independent ( ansible — SSH , terraform  - API ) 
 Providers:
3. Platform will keeps on changing 
 Terraform 1.0  — terraform 5.x — 50 % change in code 

1. https://registry.terraform.io/browse/providers

1. Official  — Terraform ( partner with the respective company and they manage the provider code)
2. Partner — ex: oracle maintain its own provider code or Alibaba
3. Community - group of people  or volunteer write the code and maintain the code.  -   it will open vulnerable port so we need to scan the provider module code and packages 

Providers — version will be keep on changing	 - code is upto the provider version  — challenge or learning opportunities 
Why providers are upgrading  the version ?
AWS —   
 1. Services  & Security reason. 
 2. API Layers ( AWS api  function )    or AWS CLI ( API) 
3. AWS CLI function into providers module and they are publishing 


												Day 4 - 07/11/2024

1. IAM  — user /roles/policies  — cloud access 
2. Active Directory -  system level access -  — system account   / domain / - sub domain /  account   linux
3.  LDAP server - linux servers 
4.  Sailpoint  or cyberark  - — Application level access 
5. vault 
  4.  Application API level access — 


 SAAS — Azure Active Directory — IAM ( key based login ( app registration ) or user based login( user  & password)  ) & User account manager 

User — IAM method login( secret key and access key )   not  the password login 

 CLI  or API  method  - access key and secret keys - hand shaking mechanism ( ( SHA 256 algorithm) 

 Authentication ( Access key)  & Authorized( policies — admin access)   


AWS  — Account managment 
provider "aws" {
  region     = "us-east-1"
  access_key = ""
  secret_key = ""

}


Azure  - Subscription managment 

provider "azurerm" {

  subscription_id = ""
  client_id       = ""
  client_secret   = ""
  tenant_id       = ""
  features {}
}

													Day - 5
1. VPC   & availability zones
2. Subnet
3. Internet gateway 
4. Routing table
5.  Security group( firewall) 
6. User 
7. Key pair
8. Public ip - elastic ip 
9. Ebs — shared  storage
10. EFS 
11.  Ec2 instance

VPC —   one region — 3 availability zone

One zone - 2 subnet 

State file has — desired state 

1. Desired state
2. Current state

Desired State ( 10.0.0.0/16)  — current ( 10.0.0.0/24) 

Terraform plan & apply 
Desired State ( 10.0.0.0/16)  —>  current ( 10.0.0.0/16 ) 

Desire state( ipv6 —  ) — current (ipv6 — 23423423.eew.we.e)

terraform plan & apply 
Desire state( ipv6 — 23423423.eew.we.e) <— current (ipv6 — 23423423.eew.we.e)


Terraform - no  manual activity in cloud environments 

terraform graph -type=plan | dot -Tpng > graph.png


											Day -6 07/15/2024

https://github.com/Sankalpjadhav/IaC-Project/blob/master/instance.tf	


variable "aws_region" {
  description = "AWS region"
  type        = string
  default     = "us-east-1"
}
variable "instance_details" {
  description = "instance type"
  type        = string
  default     = "t2.micro"
}

To override the  Variable parameter and take the var input  while executing the code
terraform plan -var="instance_details=t3.micro"

Terraform Var file for different Environments.

terraform plan -var-file="prod.tfvars"
